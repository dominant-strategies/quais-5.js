"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import assert from "assert";
//import Web3HttpProvider from "web3-providers-http";
import { quais } from "quais";
import { fundAddress, returnFunds } from "./utils";
const bnify = quais.BigNumber.from;
const blockchainData = {
    homestead: {
        addresses: [
            {
                address: "0x193399fa97ae9762a186e921582cedb0987d9470",
                balance: bnify("100000000000000000000"),
                code: "0x"
            },
            // Splitter contract
            {
                address: "0x0dcB6Cc8516568104758705B8320924Cdca5Bd44",
                code: "",
                storage: {
                    "2": "0x000000000000000000000000276a1e24f3541c81f1b699f00ef4a7fdde7ba6f1"
                }
            },
        ],
        blocks: [
            {
                baseFeePerGas: bnify("0x3b9aca00"),
                difficulty: bnify("0x72ea4ce58"),
                extRollupRoot: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                extTransactions: [],
                extTransactionsRoot: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                extraData: "0xdf8776302e31382e3087676f2d7175616988676f312e32312e30856c696e7578",
                gasLimit: bnify("0x4c4b40"),
                gasUsed: bnify("0x0"),
                hash: "0x32627a1ebb4085cb4e57c98e2439b1ae8dcb25701e7a1e20c68a6dea2dd29a16",
                location: "0x0000",
                manifestHash: [
                    "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                    "0x28fa804910b4243464d3af3098ec4ccdf3be9ef3516106cfb56262d2aacafb0a",
                    "0x7367b32c83214a7971a2ea3b191d9712d46d93bcb5728cb83a2f81345b0c6b5a"
                ],
                miner: "0x08317aDceA9880DcE5d6D21c723Af39338a83663",
                mixHash: "0xe6d60dcd3c7e2c870b32f858d588b8ab5ed0b0b8c820f689d3a65b5f0b904190",
                nonce: "0x6b6a0ef18cfe6371",
                number: [
                    "0x54d",
                    "0x2759",
                    "0x186a0" //Zone block number
                ],
                order: 2,
                parentDeltaS: [
                    "0x0",
                    "0x280bb17c27c8151a41b1",
                    "0x9de48078460765ceaf7"
                ],
                parentEntropy: [
                    "0x1c84357313bf394b43185c5",
                    "0x1c86b62e2b81b5cc94bc776",
                    "0x1c862d2032e695b54d49121"
                ],
                parentHash: [
                    "0x1ccf45cf6f077f35480c4447ea1863d51616e038069da4f61776278a7165f924",
                    "0x956ff69afac44804ac5444098daa58160e3bdc85d80f02efc1b2547594839d52",
                    "0x2f40c7c568f3ece80ca3ab75e7835feb4fc0ccca876084ec9cf944580b2d9df4"
                ],
                receiptsRoot: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                size: bnify("0x25d"),
                stateRoot: "0xf5c50d3c262e3fa2a2298ce36ac19fb395e866e39d22d68d8b449f2643a2a21e",
                subManifest: [],
                timestamp: "0x6523df74",
                totalEntropy: bnify("0x1c862f4e3366f21e02a280a"),
                transactions: [],
                transactionsRoot: "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                uncles: []
            }
        ],
        transactions: [
            {
                blockHash: "0x2b9ca75c7cad6f689e5155e7ee5cc48e16efe6a20104727cfd94d33d7ae626b3",
                blockNumber: Number("0x2a44f"),
                from: "0x18c5a980382B6eD6688b9E4111E0aB06101242C8",
                gas: bnify("0xa410"),
                maxFeePerGas: bnify("0x430e23400"),
                maxPriorityFeePerGas: bnify("0x3b9aca00"),
                hash: "0x25159ef781e5b58d7ceb1ecf68038bf99ce116919c2caf9d3dfb8ba1c953e5ef",
                data: "0x",
                nonce: Number("0x3a0"),
                to: "0x178E0480d9bD8a3537F148588682749fBF2aAe0d",
                transactionIndex: Number("0x5"),
                value: bnify("0x18"),
                type: "0x0",
                accessList: [],
                chainId: Number("0x2328"),
                v: "0x0",
                r: "0x80ad17bd6f1e36501617d6d5c972d588a3467d8384a68e9d96fbc9c00569deb4",
                s: "0x44fb2db41467edca734df23a49aa6cbf92d45a358b5b03f5a9ee86e05ed4653e"
            },
            {
                blockHash: "0x0c5c841a7c1957f8c43a979882032f3de887f606814e76295e3c4b7b12091347",
                blockNumber: Number("0x13a56"),
                from: "0x03b1B2FcBAA6E4a3B44ac348B00ED0a68546D26b",
                gas: bnify("0x3d0900"),
                maxFeePerGas: bnify("0x77359400"),
                maxPriorityFeePerGas: bnify("0x3b9aca00"),
                hash: "0x5c3c9b3a88a05ae315999e21774276555460b1bc9ac4b97c0cbff87de8547cca",
                data: "0x60806040523480156200001157600080fd5b506040518060400160405280600c81526020017f4d656d65436f696e20496e750000000000000000000000000000000000000000815250600f908162000058919062000971565b506040518060400160405280600381526020017f4d43490000000000000000000000000000000000000000000000000000000000815250601090816200009f919062000971565b5033601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555069d3c21bcecceda1000000600e8190555062000128601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e546200058060201b60201c565b6040518060400160405280600060ff168152602001601d60ff1681525060126000600d81106200015d576200015c62000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280601e60ff168152602001603a60ff1681525060126001600d8110620001d857620001d762000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280603b60ff168152602001605760ff1681525060126002600d811062000253576200025262000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280605860ff168152602001607360ff1681525060126003600d8110620002ce57620002cd62000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280607460ff168152602001608f60ff1681525060126004600d811062000349576200034862000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280609060ff16815260200160ab60ff1681525060126005600d8110620003c457620003c362000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060ac60ff16815260200160c760ff1681525060126006600d81106200043f576200043e62000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060c860ff16815260200160e360ff1681525060126007600d8110620004ba57620004b962000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060e460ff16815260200160ff801681525060126008600d811062000534576200053362000a58565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555090505062000ba2565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620005f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005e99062000ae8565b60405180910390fd5b6200060660008383620006ed60201b60201c565b80600e60008282546200061a919062000b39565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620006cd919062000b85565b60405180910390a3620006e960008383620006f260201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200077957607f821691505b6020821081036200078f576200078e62000731565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007ba565b620008058683620007ba565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620008526200084c62000846846200081d565b62000827565b6200081d565b9050919050565b6000819050919050565b6200086e8362000831565b620008866200087d8262000859565b848454620007c7565b825550505050565b600090565b6200089d6200088e565b620008aa81848462000863565b505050565b5b81811015620008d257620008c660008262000893565b600181019050620008b0565b5050565b601f8211156200092157620008eb8162000795565b620008f684620007aa565b8101602085101562000906578190505b6200091e6200091585620007aa565b830182620008af565b50505b505050565b600082821c905092915050565b6000620009466000198460080262000926565b1980831691505092915050565b600062000961838362000933565b9150826002028217905092915050565b6200097c82620006f7565b67ffffffffffffffff81111562000998576200099762000702565b5b620009a4825462000760565b620009b1828285620008d6565b600060209050601f831160018114620009e95760008415620009d4578287015190505b620009e0858262000953565b86555062000a50565b601f198416620009f98662000795565b60005b8281101562000a2357848901518255600182019150602085019450602081019050620009fc565b8683101562000a43578489015162000a3f601f89168262000933565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000ad0601f8362000a87565b915062000add8262000a98565b602082019050919050565b6000602082019050818103600083015262000b038162000ac1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000b46826200081d565b915062000b53836200081d565b925082820190508082111562000b6e5762000b6d62000b0a565b5b92915050565b62000b7f816200081d565b82525050565b600060208201905062000b9c600083018462000b74565b92915050565b6132358062000bb26000396000f3fe6080604052600436106101145760003560e01c8063593b79fe116100a0578063a534d9de11610064578063a534d9de146103f3578063a9059cbb1461041c578063bc472aa314610459578063dd62ed3e14610496578063e20e50ba146104d357610114565b8063593b79fe146102f557806370a082311461033257806373cddab21461036f57806395d89b411461038b578063a457c2d7146103b657610114565b806323b872dd116100e757806323b872dd146101d5578063313ce56714610212578063395093511461023d578063399444bc1461027a578063429437bf146102b757610114565b806306fdde0314610119578063095ea7b31461014457806318160ddd1461018157806320e8dd93146101ac575b600080fd5b34801561012557600080fd5b5061012e6104fc565b60405161013b9190611cf4565b60405180910390f35b34801561015057600080fd5b5061016b60048036038101906101669190611db4565b61058e565b6040516101789190611e0f565b60405180910390f35b34801561018d57600080fd5b506101966105a5565b6040516101a39190611e39565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce9190611db4565b6105af565b005b3480156101e157600080fd5b506101fc60048036038101906101f79190611e54565b6106ad565b6040516102099190611e0f565b60405180910390f35b34801561021e57600080fd5b506102276106d0565b6040516102349190611ec3565b60405180910390f35b34801561024957600080fd5b50610264600480360381019061025f9190611db4565b6106d9565b6040516102719190611e0f565b60405180910390f35b34801561028657600080fd5b506102a1600480360381019061029c9190611ede565b610709565b6040516102ae9190611ec3565b60405180910390f35b3480156102c357600080fd5b506102de60048036038101906102d99190611f0b565b610816565b6040516102ec929190611f38565b60405180910390f35b34801561030157600080fd5b5061031c60048036038101906103179190611ede565b610857565b6040516103299190611fb6565b60405180910390f35b34801561033e57600080fd5b5061035960048036038101906103549190611ede565b610880565b6040516103669190611e39565b60405180910390f35b61038960048036038101906103849190611fd8565b6108c8565b005b34801561039757600080fd5b506103a0610b71565b6040516103ad9190611cf4565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d89190611db4565b610c03565b6040516103ea9190611e0f565b60405180910390f35b3480156103ff57600080fd5b5061041a6004803603810190610415919061210e565b610c73565b005b34801561042857600080fd5b50610443600480360381019061043e9190611db4565b610f62565b6040516104509190611e0f565b60405180910390f35b34801561046557600080fd5b50610480600480360381019061047b9190611f0b565b610f79565b60405161048d919061219e565b60405180910390f35b3480156104a257600080fd5b506104bd60048036038101906104b891906121b9565b610faf565b6040516104ca9190611e39565b60405180910390f35b3480156104df57600080fd5b506104fa60048036038101906104f59190612225565b611036565b005b6060600f805461050b90612294565b80601f016020809104026020016040519081016040528092919081815260200182805461053790612294565b80156105845780601f1061055957610100808354040283529160200191610584565b820191906000526020600020905b81548152906001019060200180831161056757829003601f168201915b5050505050905090565b600061059b338484611256565b6001905092915050565b6000600e54905090565b3373ffffffffffffffffffffffffffffffffffffffff1660026105d133610709565b60ff16600c81106105e5576105e46122c5565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16143360405160200161062f919061233c565b60405160208183030381529060405260405160200161064e9190612436565b6040516020818303038152906040529061069e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106959190611cf4565b60405180910390fd5b506106a98282611466565b5050565b60006106ba8433846115bc565b6106c5848484611648565b600190509392505050565b60006012905090565b6000803390506106fe8185856106ef8589610faf565b6106f99190612492565b611256565b600191505092915050565b60008061071583610857565b600081518110610728576107276122c5565b5b602001015160f81c60f81b60f81c905060005b60098160ff1610156107d55760128160ff16600d811061075e5761075d6122c5565b5b0160000160009054906101000a900460ff1660ff168260ff16101580156107b3575060128160ff16600d8110610797576107966122c5565b5b0160000160019054906101000a900460ff1660ff168260ff1611155b156107c2578092505050610811565b80806107cd906124c6565b91505061073b565b506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108089061253b565b60405180910390fd5b919050565b601281600d811061082657600080fd5b016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b60608160405160200161086a919061233c565b6040516020818303038152906040529050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600085f79050801561090f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610906906125a7565b60405180910390fd5b6109193386611905565b6000600261092688610709565b60ff16600c811061093a576109396122c5565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c490612639565b60405180910390fd5b60008585856109dc9190612492565b6109e69190612659565b9050803410156109f582611ad2565b604051602001610a05919061278a565b60405160208183030381529060405290610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c9190611cf4565b60405180910390fd5b5060008888604051602401610a6b9291906127b7565b6040516020818303038152906040527f20e8dd93000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000835160208501898b8d60008b6000f690508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcf0ee562475620bbcd2f1b0675c8163317513271e4fdbbe9722436f247bd6d998b604051610b5d9190611e39565b60405180910390a350505050505050505050565b606060108054610b8090612294565b80601f0160208091040260200160405190810160405280929190818152602001828054610bac90612294565b8015610bf95780601f10610bce57610100808354040283529160200191610bf9565b820191906000526020600020905b815481529060010190602001808311610bdc57829003601f168201915b5050505050905090565b6000803390506000610c158286610faf565b905083811015610c5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5190612852565b60405180910390fd5b610c678286868403611256565b60019250505092915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa906128be565b60405180910390fd5b818190508484905014610d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4290612950565b60405180910390fd5b60005b848490508160ff161015610f5b57600985858360ff16818110610d7457610d736122c5565b5b9050602002016020810190610d899190612970565b60ff1610610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc3906129e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600286868460ff16818110610dfc57610dfb6122c5565b5b9050602002016020810190610e119190612970565b60ff16600c8110610e2557610e246122c5565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9490612a7b565b60405180910390fd5b82828260ff16818110610eb357610eb26122c5565b5b9050602002016020810190610ec89190611ede565b600286868460ff16818110610ee057610edf6122c5565b5b9050602002016020810190610ef59190612970565b60ff16600c8110610f0957610f086122c5565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610f53906124c6565b915050610d4e565b5050505050565b6000610f6f338484611648565b6001905092915050565b600281600c8110610f8957600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081f79050801561107d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611074906125a7565b60405180910390fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611104906128be565b60405180910390fd5b60098360ff1610611153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114a906129e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660028460ff16600c8110611182576111816122c5565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f190612a7b565b60405180910390fd5b8160028460ff16600c8110611212576112116122c5565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600082f790508061129c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129390612b0d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361130b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130290612b9f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361137a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137190612c31565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516114589190611e39565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cc90612c9d565b60405180910390fd5b6114e160008383611c5a565b80600e60008282546114f39190612492565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115a49190611e39565b60405180910390a36115b860008383611c5f565b5050565b60006115c88484610faf565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146116425781811015611634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162b90612d09565b60405180910390fd5b6116418484848403611256565b5b50505050565b600082f790508061168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590612d9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f490612e2d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361176c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176390612ebf565b60405180910390fd5b611777848484611c5a565b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156117fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f490612f51565b60405180910390fd5b8281036000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516118eb9190611e39565b60405180910390a36118fe858585611c5f565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196b90612fe3565b60405180910390fd5b61198082600083611c5a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fd90613075565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600e60008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ab99190611e39565b60405180910390a3611acd83600084611c5f565b505050565b606060008203611b19576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611c55565b600082905060005b60008214611b4b578080611b3490613095565b915050600a82611b44919061310c565b9150611b21565b60008167ffffffffffffffff811115611b6757611b6661313d565b5b6040519080825280601f01601f191660200182016040528015611b995781602001600182028036833780820191505090505b50905060008290505b60008614611c4d57600181611bb7919061316c565b90506000600a8088611bc9919061310c565b611bd39190612659565b87611bde919061316c565b6030611bea91906131a0565b905060008160f81b905080848481518110611c0857611c076122c5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88611c44919061310c565b97505050611ba2565b819450505050505b919050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c9e578082015181840152602081019050611c83565b60008484015250505050565b6000601f19601f8301169050919050565b6000611cc682611c64565b611cd08185611c6f565b9350611ce0818560208601611c80565b611ce981611caa565b840191505092915050565b60006020820190508181036000830152611d0e8184611cbb565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d4b82611d20565b9050919050565b611d5b81611d40565b8114611d6657600080fd5b50565b600081359050611d7881611d52565b92915050565b6000819050919050565b611d9181611d7e565b8114611d9c57600080fd5b50565b600081359050611dae81611d88565b92915050565b60008060408385031215611dcb57611dca611d16565b5b6000611dd985828601611d69565b9250506020611dea85828601611d9f565b9150509250929050565b60008115159050919050565b611e0981611df4565b82525050565b6000602082019050611e246000830184611e00565b92915050565b611e3381611d7e565b82525050565b6000602082019050611e4e6000830184611e2a565b92915050565b600080600060608486031215611e6d57611e6c611d16565b5b6000611e7b86828701611d69565b9350506020611e8c86828701611d69565b9250506040611e9d86828701611d9f565b9150509250925092565b600060ff82169050919050565b611ebd81611ea7565b82525050565b6000602082019050611ed86000830184611eb4565b92915050565b600060208284031215611ef457611ef3611d16565b5b6000611f0284828501611d69565b91505092915050565b600060208284031215611f2157611f20611d16565b5b6000611f2f84828501611d9f565b91505092915050565b6000604082019050611f4d6000830185611eb4565b611f5a6020830184611eb4565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000611f8882611f61565b611f928185611f6c565b9350611fa2818560208601611c80565b611fab81611caa565b840191505092915050565b60006020820190508181036000830152611fd08184611f7d565b905092915050565b600080600080600060a08688031215611ff457611ff3611d16565b5b600061200288828901611d69565b955050602061201388828901611d9f565b945050604061202488828901611d9f565b935050606061203588828901611d9f565b925050608061204688828901611d9f565b9150509295509295909350565b600080fd5b600080fd5b600080fd5b60008083601f84011261207857612077612053565b5b8235905067ffffffffffffffff81111561209557612094612058565b5b6020830191508360208202830111156120b1576120b061205d565b5b9250929050565b60008083601f8401126120ce576120cd612053565b5b8235905067ffffffffffffffff8111156120eb576120ea612058565b5b6020830191508360208202830111156121075761210661205d565b5b9250929050565b6000806000806040858703121561212857612127611d16565b5b600085013567ffffffffffffffff81111561214657612145611d1b565b5b61215287828801612062565b9450945050602085013567ffffffffffffffff81111561217557612174611d1b565b5b612181878288016120b8565b925092505092959194509250565b61219881611d40565b82525050565b60006020820190506121b3600083018461218f565b92915050565b600080604083850312156121d0576121cf611d16565b5b60006121de85828601611d69565b92505060206121ef85828601611d69565b9150509250929050565b61220281611ea7565b811461220d57600080fd5b50565b60008135905061221f816121f9565b92915050565b6000806040838503121561223c5761223b611d16565b5b600061224a85828601612210565b925050602061225b85828601611d69565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806122ac57607f821691505b6020821081036122bf576122be612265565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b600061230c826122f4565b9050919050565b600061231e82612301565b9050919050565b61233661233182611d40565b612313565b82525050565b60006123488284612325565b60148201915081905092915050565b600081905092915050565b7f53656e6465722000000000000000000000000000000000000000000000000000600082015250565b6000612398600783612357565b91506123a382612362565b600782019050919050565b600081905092915050565b60006123c482611f61565b6123ce81856123ae565b93506123de818560208601611c80565b80840191505092915050565b7f206e6f7420617070726f76656400000000000000000000000000000000000000600082015250565b6000612420600d83612357565b915061242b826123ea565b600d82019050919050565b60006124418261238b565b915061244d82846123b9565b915061245882612413565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061249d82611d7e565b91506124a883611d7e565b92508282019050808211156124c0576124bf612463565b5b92915050565b60006124d182611ea7565b915060ff82036124e4576124e3612463565b5b600182019050919050565b7f496e76616c6964204c6f636174696f6e00000000000000000000000000000000600082015250565b6000612525601083611c6f565b9150612530826124ef565b602082019050919050565b6000602082019050818103600083015261255481612518565b9050919050565b7f41646472657373206973206e6f742065787465726e616c000000000000000000600082015250565b6000612591601783611c6f565b915061259c8261255b565b602082019050919050565b600060208201905081810360008301526125c081612584565b9050919050565b7f546f6b656e206973206e6f7420617661696c61626c65206f6e2074686520646560008201527f7374696e6174696f6e20636861696e0000000000000000000000000000000000602082015250565b6000612623602f83611c6f565b915061262e826125c7565b604082019050919050565b6000602082019050818103600083015261265281612616565b9050919050565b600061266482611d7e565b915061266f83611d7e565b925082820261267d81611d7e565b9150828204841483151761269457612693612463565b5b5092915050565b7f4e6f7420656e6f756768206761732073656e742c206e656564206174206c656160008201527f7374200000000000000000000000000000000000000000000000000000000000602082015250565b60006126f7602383612357565b91506127028261269b565b602382019050919050565b600061271882611c64565b6127228185612357565b9350612732818560208601611c80565b80840191505092915050565b7f2077656900000000000000000000000000000000000000000000000000000000600082015250565b6000612774600483612357565b915061277f8261273e565b600482019050919050565b6000612795826126ea565b91506127a1828461270d565b91506127ac82612767565b915081905092915050565b60006040820190506127cc600083018561218f565b6127d96020830184611e2a565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061283c602583611c6f565b9150612847826127e0565b604082019050919050565b6000602082019050818103600083015261286b8161282f565b9050919050565b7f53656e646572206973206e6f74206465706c6f79657200000000000000000000600082015250565b60006128a8601683611c6f565b91506128b382612872565b602082019050919050565b600060208201905081810360008301526128d78161289b565b9050919050565b7f636861696e20616e64206164647265737320617272617973206d75737420626560008201527f207468652073616d65206c656e67746800000000000000000000000000000000602082015250565b600061293a603083611c6f565b9150612945826128de565b604082019050919050565b600060208201905081810360008301526129698161292d565b9050919050565b60006020828403121561298657612985611d16565b5b600061299484828501612210565b91505092915050565b7f4d61782039207a6f6e6573000000000000000000000000000000000000000000600082015250565b60006129d3600b83611c6f565b91506129de8261299d565b602082019050919050565b60006020820190508181036000830152612a02816129c6565b9050919050565b7f54686520617070726f766564206164647265737320666f722074686973207a6f60008201527f6e6520616c726561647920657869737473000000000000000000000000000000602082015250565b6000612a65603183611c6f565b9150612a7082612a09565b604082019050919050565b60006020820190508181036000830152612a9481612a58565b9050919050565b7f5370656e64657220616464726573732069732065787465726e616c2e2055736560008201527f2063726f73732d636861696e207472616e736665722066756e6374696f6e2e00602082015250565b6000612af7603f83611c6f565b9150612b0282612a9b565b604082019050919050565b60006020820190508181036000830152612b2681612aea565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b89602483611c6f565b9150612b9482612b2d565b604082019050919050565b60006020820190508181036000830152612bb881612b7c565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c1b602283611c6f565b9150612c2682612bbf565b604082019050919050565b60006020820190508181036000830152612c4a81612c0e565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612c87601f83611c6f565b9150612c9282612c51565b602082019050919050565b60006020820190508181036000830152612cb681612c7a565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612cf3601d83611c6f565b9150612cfe82612cbd565b602082019050919050565b60006020820190508181036000830152612d2281612ce6565b9050919050565b7f416464726573732069732065787465726e616c2e205573652063726f73732d6360008201527f6861696e207472616e736665722066756e6374696f6e2e000000000000000000602082015250565b6000612d85603783611c6f565b9150612d9082612d29565b604082019050919050565b60006020820190508181036000830152612db481612d78565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612e17602583611c6f565b9150612e2282612dbb565b604082019050919050565b60006020820190508181036000830152612e4681612e0a565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612ea9602383611c6f565b9150612eb482612e4d565b604082019050919050565b60006020820190508181036000830152612ed881612e9c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612f3b602683611c6f565b9150612f4682612edf565b604082019050919050565b60006020820190508181036000830152612f6a81612f2e565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fcd602183611c6f565b9150612fd882612f71565b604082019050919050565b60006020820190508181036000830152612ffc81612fc0565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061305f602283611c6f565b915061306a82613003565b604082019050919050565b6000602082019050818103600083015261308e81613052565b9050919050565b60006130a082611d7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036130d2576130d1612463565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061311782611d7e565b915061312283611d7e565b925082613132576131316130dd565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061317782611d7e565b915061318283611d7e565b925082820390508181111561319a57613199612463565b5b92915050565b60006131ab82611ea7565b91506131b683611ea7565b9250828201905060ff8111156131cf576131ce612463565b5b9291505056fea2646970667358221220ad81ea1a5b638ad1dfe33580f58afacd4ff43fcb3425905aafb8961573459d7064736f6c63782c302e382e31382d646576656c6f702e323032322e31312e382b636f6d6d69742e36306161353861362e6d6f64005d",
                nonce: Number("0x2"),
                to: null,
                transactionIndex: Number("0x1"),
                value: bnify("0x0"),
                type: "0x0",
                accessList: [],
                chainId: Number("0x2328"),
                v: "0x1",
                r: "0x91129b6da87c7fe7873e0ce74eb5a04435d581ae215a0736ac468bbd30fc7c9c",
                s: "0x3f769d8425df7776610d96cfa5d3b8cc4e98dbc38d1dc491aef23a104e4c2f29"
            },
            {
                blockHash: "0x12bd3fbff4078c0e79d1cb7282f7c486a5138e4e956a57908a884b2125c381a5",
                blockNumber: Number("0x11bab"),
                from: "0x53767681E8C720c084Dd42Aae65308fb49c99710",
                gas: bnify("0x186a0"),
                maxFeePerGas: bnify("0x165a0bc00"),
                maxPriorityFeePerGas: bnify("0xb2d05e00"),
                hash: "0x02662f27897d62101188c6fdb876dab3f4e6511ce3120367a7e75e04e2de2c1c",
                data: "0x",
                nonce: Number("0x2"),
                to: "0x044f7c17c62f566302DE11b3aC0875b0292031E1",
                transactionIndex: Number("0x14"),
                value: bnify("0x5fc1b97136320000"),
                type: "0x1",
                accessList: [],
                chainId: Number("0x2328"),
                //v: null,
                //r: null,
                //s: null,
            },
            {
                blockHash: "0xbed562f9423833e0395681e7b3be6a74803038d1b87dea3dd8e73eae6e530b2e",
                blockNumber: Number("0x138f3"),
                from: "0x03b1B2FcBAA6E4a3B44ac348B00ED0a68546D26b",
                gas: bnify("0x186a0"),
                maxFeePerGas: bnify("0x77359400"),
                maxPriorityFeePerGas: bnify("0x3b9aca00"),
                hash: "0x1277e831dc2dec0b805f4b37832f17c2c0bc6c5dd3ed2089a88b5372d16666b0",
                data: "0x",
                nonce: Number("0x1"),
                to: "0x3fa80072620f5647D2E1412f8532C6C53192d4cc",
                transactionIndex: Number("0x16"),
                value: bnify("0x8ac7230489e80000"),
                type: "0x2",
                accessList: [],
                chainId: Number("0x2328"),
                v: "0x0",
                r: "0x81d950515ae8d0b3ac29c4d84c5b01fbc65b7e154eb086cb96d589aa28920c8a",
                s: "0x2f5e5520676351297ff32052654fd66dacaf83be0dd73496d220588b62fd3191",
                etxGasLimit: bnify("0x186a0"),
                etxGasPrice: bnify("0x165a0bc00"),
                etxGasTip: bnify("0xb2d05e00"),
                etxData: "0x",
                etxAccessList: []
            },
            {
                blockHash: "0x942c3369f8839772a1f7460ba7201a762389ac0ec486232edcaa1be1edf83247",
                blockNumber: Number("0x13aff"),
                from: "0x03b1B2FcBAA6E4a3B44ac348B00ED0a68546D26b",
                gas: bnify("0x186a0"),
                maxFeePerGas: bnify("0x77359400"),
                maxPriorityFeePerGas: bnify("0x3b9aca00"),
                hash: "0x1a9cfc329f99d6bdacbadb8a614e28f906d2784d56670cd5cb310330e0612c43",
                data: "0xa9059cbb0000000000000000000000001b824030400a3fcbc529e6d3a51f7264bf72db660000000000000000000000000000000000000000000069e10de76676d0800000",
                nonce: Number("0x5"),
                to: "0x0dcB6Cc8516568104758705B8320924Cdca5Bd44",
                transactionIndex: Number("0x2"),
                value: bnify("0x0"),
                type: "0x0",
                accessList: [],
                chainId: Number("0x2328"),
                v: "0x1",
                r: "0xf6e6b18d8f571f8946d8a02717bb4fc3b0f62b2a33363d97a7715544828c44b1",
                s: "0x15c02e0b54f46eb074a109ff5ad97568adc9c39cdf263bfff0a506a8af5491"
            }
        ],
        transactionReceipts: [
            {
                blockHash: "0x2b9ca75c7cad6f689e5155e7ee5cc48e16efe6a20104727cfd94d33d7ae626b3",
                blockNumber: Number("0x2a44f"),
                cumulativeGasUsed: bnify("0x1ec30"),
                effectiveGasPrice: bnify("0x77359400"),
                contractAddress: null,
                etxs: [],
                from: "0x18c5a980382B6eD6688b9E4111E0aB06101242C8",
                gasUsed: bnify("0x5208"),
                logs: [],
                logsBloom: "0x
                status: "0x1",
                to: "0x178E0480d9bD8a3537F148588682749fBF2aAe0d",
                transactionHash: "0x25159ef781e5b58d7ceb1ecf68038bf99ce116919c2caf9d3dfb8ba1c953e5ef",
                transactionIndex: Number("0x5"),
                type: "0x0"
            },
            //Type 1 Tx
            {
                blockHash: "0x12bd3fbff4078c0e79d1cb7282f7c486a5138e4e956a57908a884b2125c381a5",
                blockNumber: Number("0x11bab"),
                contractAddress: null,
                cumulativeGasUsed: bnify("0x6baa8"),
                effectiveGasPrice: bnify("0xee6b2800"),
                etxs: [],
                from: "0x53767681E8C720c084Dd42Aae65308fb49c99710",
                gasUsed: bnify("0x5208"),
                logs: [],
                logsBloom: "0x
                status: "0x1",
                to: "0x044f7c17c62f566302DE11b3aC0875b0292031E1",
                transactionHash: "0x02662f27897d62101188c6fdb876dab3f4e6511ce3120367a7e75e04e2de2c1c",
                transactionIndex: Number("0x14"),
                type: "0x1"
            },
            //Type 2 TX
            {
                blockHash: "0xbed562f9423833e0395681e7b3be6a74803038d1b87dea3dd8e73eae6e530b2e",
                blockNumber: Number("0x138f3"),
                contractAddress: null,
                cumulativeGasUsed: bnify("0x854d0"),
                effectiveGasPrice: bnify("0x77359400"),
                etxs: [
                    {
                        type: "0x1",
                        nonce: Number("0x2"),
                        gasPrice: null,
                        maxPriorityFeePerGas: bnify("0xb2d05e00"),
                        maxFeePerGas: bnify("0x165a0bc00"),
                        gas: bnify("0x186a0"),
                        value: bnify("0x8ac7230489e80000"),
                        data: "0x",
                        to: "0x3fa80072620f5647D2E1412f8532C6C53192d4cc",
                        accessList: [],
                        chainId: Number("0x2328"),
                        from: "0x03b1B2FcBAA6E4a3B44ac348B00ED0a68546D26b",
                        hash: "0x0a6f418cf47219ffb1e6cbe74d8cbe3e40739d573c3dbe5809c55387116b1064"
                    }
                ],
                from: "0x03b1B2FcBAA6E4a3B44ac348B00ED0a68546D26b",
                gasUsed: bnify("0xa410"),
                logs: [],
                logsBloom: "0x
                status: "0x1",
                to: "0x3fa80072620f5647D2E1412f8532C6C53192d4cc",
                transactionHash: "0x1277e831dc2dec0b805f4b37832f17c2c0bc6c5dd3ed2089a88b5372d16666b0",
                transactionIndex: Number("0x16"),
                type: "0x2"
            },
            //Token mint contract call   
            {
                blockHash: "0x0c5c841a7c1957f8c43a979882032f3de887f606814e76295e3c4b7b12091347",
                blockNumber: Number("0x13a56"),
                contractAddress: "0x0dcB6Cc8516568104758705B8320924Cdca5Bd44",
                cumulativeGasUsed: bnify("0x30bd01"),
                effectiveGasPrice: bnify("0x77359400"),
                etxs: [],
                from: "0x03b1B2FcBAA6E4a3B44ac348B00ED0a68546D26b",
                gasUsed: bnify("0x306af9"),
                logs: [
                    {
                        address: "0x0dcB6Cc8516568104758705B8320924Cdca5Bd44",
                        topics: [
                            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "0x00000000000000000000000003b1b2fcbaa6e4a3b44ac348b00ed0a68546d26b"
                        ],
                        data: "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
                        blockNumber: Number("0x13a56"),
                        transactionHash: "0x5c3c9b3a88a05ae315999e21774276555460b1bc9ac4b97c0cbff87de8547cca",
                        transactionIndex: Number("0x1"),
                        blockHash: "0x0c5c841a7c1957f8c43a979882032f3de887f606814e76295e3c4b7b12091347",
                        logIndex: Number("0x0"),
                    }
                ],
                logsBloom: "0x
                status: "0x1",
                to: null,
                transactionHash: "0x5c3c9b3a88a05ae315999e21774276555460b1bc9ac4b97c0cbff87de8547cca",
                transactionIndex: Number("0x1"),
                type: "0x0"
            }
        ]
    },
};
blockchainData["default"] = blockchainData.homestead;
function equals(name, actual, expected) {
    if (expected && expected.eq) {
        if (actual == null) {
            assert.ok(false, name + " - actual big number null");
        }
        expected = quais.BigNumber.from(expected);
        actual = quais.BigNumber.from(actual);
        assert.ok(expected.eq(actual), name + " matches");
    }
    else if (Array.isArray(expected)) {
        if (actual == null) {
            assert.ok(false, name + " - actual array null");
        }
        assert.equal(actual.length, expected.length, name + " array lengths match");
        for (let i = 0; i < expected.length; i++) {
            equals("(" + name + " - item " + i + ")", actual[i], expected[i]);
        }
    }
    else if (typeof (expected) === "object") {
        if (actual == null) {
            if (expected === actual) {
                return;
            }
            assert.ok(false, name + " - actual object null");
        }
        let keys = {};
        Object.keys(expected).forEach((key) => { keys[key] = true; });
        Object.keys(actual).forEach((key) => { keys[key] = true; });
        Object.keys(keys).forEach((key) => {
            equals("(" + name + " - key + " + key + ")", actual[key], expected[key]);
        });
    }
    else {
        if (actual == null) {
            assert.ok(false, name + " - actual null");
        }
        assert.equal(actual, expected, name + " matches");
    }
}
function waiter(duration) {
    return new Promise((resolve) => {
        const timer = setTimeout(resolve, duration);
        if (timer.unref) {
            timer.unref();
        }
    });
}
const allNetworks = ["default", "homestead"];
// We use separate API keys because otherwise the testcases sometimes
// fail during CI because our default keys are pretty heavily used
const providerFunctions = [
    {
        name: "getDefaultProvider",
        networks: allNetworks,
        create: (network) => {
            if (network == "default") {
                const prov = quais.getDefaultProvider('https://rpc.cyprus1.colosseum.quaiscan.io');
                return prov;
            }
            const prov = quais.getDefaultProvider('https://rpc.cyprus1.colosseum.quaiscan.io');
            return prov;
        }
    },
];
let fundWallet;
do {
    fundWallet = quais.Wallet.createRandom();
    var firstPart = parseInt(fundWallet.address.slice(2, 4), 16);
} while (firstPart > 29); //0x1D in hex, keep generating until cyprus1 addr
const testFunctions = [];
Object.keys(blockchainData).forEach((network) => {
    function addSimpleTest(name, func, expected) {
        testFunctions.push({
            name: name,
            networks: [network],
            execute: (provider) => __awaiter(this, void 0, void 0, function* () {
                const value = yield func(provider);
                equals(name, expected, value);
            })
        });
    }
    function addObjectTest(name, func, expected, checkSkip) {
        testFunctions.push({
            name,
            networks: [network],
            checkSkip,
            execute: (provider) => __awaiter(this, void 0, void 0, function* () {
                const value = yield func(provider);
                Object.keys(expected).forEach((key) => {
                    // console.log("Name: " + name)
                    // console.log("Value: \n" + JSON.stringify(value, null, 4));
                    // console.log("Expected: \n" + JSON.stringify(expected, null, 4));
                    equals(`${name}.${key}`, value[key], expected[key]);
                });
            })
        });
    }
    const tests = blockchainData[network];
    // And address test case can have any of the following:
    // - balance
    // - code
    // - storage
    // - ENS name
    tests.addresses.forEach((test) => {
        if (test.balance) {
            addSimpleTest(`fetches account balance: ${test.address}`, (provider) => {
                return provider.getBalance(test.address);
            }, test.balance);
        }
        if (test.code) {
            addSimpleTest(`fetches account code: ${test.address}`, (provider) => {
                return provider.getCode(test.address);
            }, test.code);
        }
        if (test.storage) {
            Object.keys(test.storage).forEach((position) => {
                addSimpleTest(`fetches storage: ${test.address}:${position}`, (provider) => {
                    return provider.getStorageAt(test.address, bnify(position));
                }, test.storage[position]);
            });
        }
    });
    tests.blocks.forEach((test) => {
        addObjectTest(`fetches block (by number) #${test.number[2]}`, (provider) => __awaiter(void 0, void 0, void 0, function* () {
            const zoneBlock = test.number[2];
            const result = yield provider.getBlock(zoneBlock);
            return result;
        }), test);
    });
    tests.blocks.forEach((test) => {
        addObjectTest(`fetches block (by hash) ${test.hash}`, (provider) => {
            return provider.getBlock(test.hash);
        }, test, (provider, network, test) => {
            return (provider === "JsonRpcProvider");
        });
    });
    tests.transactions.forEach((test) => {
        const hash = test.hash;
        addObjectTest(`fetches transaction ${hash}`, (provider) => __awaiter(void 0, void 0, void 0, function* () {
            const tx = yield provider.getTransaction(hash);
            // This changes with every block
            assert.equal(typeof (tx.confirmations), "number", "confirmations is a number");
            delete tx.confirmations;
            assert.equal(typeof (tx.wait), "function", "wait is a function");
            delete tx.wait;
            return tx;
        }), test, (provider, network, test) => {
            // Temporary; pocket is being broken again for old transactions
            return provider === "JsonRpcProvider";
            //return false;
        });
    });
    tests.transactionReceipts.forEach((test) => {
        const hash = test.transactionHash;
        addObjectTest(`fetches transaction receipt ${hash}`, (provider) => __awaiter(void 0, void 0, void 0, function* () {
            const receipt = yield provider.getTransactionReceipt(hash);
            assert.ok(!!receipt, "missing receipt");
            if (test.status === null) {
                assert.ok(receipt.status === undefined, "no status");
                receipt.status = null;
            }
            // This changes with every block; so just make sure it is a number
            assert.equal(typeof (receipt.confirmations), "number", "confirmations is a number");
            delete receipt.confirmations;
            return receipt;
        }), test, (provider, network, test) => {
            // Temporary; pocket is being broken again for old transactions
            return provider === "PocketProvider";
            //return false;
        });
    });
});
(function () {
    function addErrorTest(code, func) {
        testFunctions.push({
            name: `throws correct ${code} error`,
            networks: ["goerli"],
            checkSkip: (provider, network, test) => {
                return false;
            },
            execute: (provider) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const value = yield func(provider);
                    console.log(value);
                    assert.ok(false, "did not throw");
                }
                catch (error) {
                    assert.equal(error.code, code, `incorrect error thrown: actual:${error.code} != expected:${code}`);
                }
            })
        });
    }
    /*
    @TODO: Use this for testing pre-EIP-155 transactions on specific networks
    addErrorTest(quais.utils.Logger.errors.NONCE_EXPIRED, async (provider: quais.providers.Provider) => {
        return provider.sendTransaction("0xf86480850218711a0082520894000000000000000000000000000000000000000002801ba038aaddcaaae7d3fa066dfd6f196c8348e1bb210f2c121d36cb2c24ef20cea1fba008ae378075d3cd75aae99ab75a70da82161dffb2c8263dabc5d8adecfa9447fa");
    });
    */
    // Wallet(id("foobar1234"))
    addErrorTest(quais.utils.Logger.errors.NONCE_EXPIRED, (provider) => __awaiter(this, void 0, void 0, function* () {
        return provider.sendTransaction("0x02f86e05808459682f008459682f14830186a09475544911a6f2e69ceea374f3f7e5ea9c987ece098304cb2f80c001a0d9585a780dde9e7d8c855aacec0564054b49114931fd7e320e4e983009d864f7a050bee916f2770ef17367256d8bccfbc49885467a6ba27cf5cc57e8553c73a191");
    }));
    addErrorTest(quais.utils.Logger.errors.INSUFFICIENT_FUNDS, (provider) => __awaiter(this, void 0, void 0, function* () {
        const txProps = {
            to: "0x8ba1f109551bD432803012645Ac136ddd64DBA72",
            gasPrice: 9000000000,
            gasLimit: 21000,
            chainId: 5,
            value: 1,
        };
        const wallet = quais.Wallet.createRandom();
        const tx = yield wallet.signTransaction(txProps);
        return provider.sendTransaction(tx);
    }));
    addErrorTest(quais.utils.Logger.errors.INSUFFICIENT_FUNDS, (provider) => __awaiter(this, void 0, void 0, function* () {
        const txProps = {
            to: "0x8ba1f109551bD432803012645Ac136ddd64DBA72",
            gasPrice: 9000000000,
            gasLimit: 21000,
            value: 1,
        };
        const wallet = quais.Wallet.createRandom().connect(provider);
        return wallet.sendTransaction(txProps);
    }));
    addErrorTest(quais.utils.Logger.errors.UNPREDICTABLE_GAS_LIMIT, (provider) => __awaiter(this, void 0, void 0, function* () {
        return provider.estimateGas({
            to: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e" // ENS contract
        });
    }));
})();
describe("Test Provider Methods", function () {
    let fundReceipt = null;
    before(function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(300000);
            // Get some ether from the faucet
            //const funder = await quais.utils.fetchJson(`https:/\/api.quais.io/api/v1/?action=fundAccount&address=${ fundWallet.address.toLowerCase() }`);
            fundReceipt = fundAddress(fundWallet.address).then((hash) => {
                console.log(`*** Funded: ${fundWallet.address}`);
                return hash;
            });
        });
    });
    after(function () {
        return __awaiter(this, void 0, void 0, function* () {
            this.timeout(300000);
            // Wait until the funding is complete
            //await fundReceipt;
            console.log('After in test provider');
            // Refund all unused ether to the faucet
            const hash = yield returnFunds(fundWallet);
            console.log(`*** Sweep Transaction:`, hash);
        });
    });
    providerFunctions.forEach(({ name, networks, create }) => {
        networks.forEach((network) => {
            const provider = create(network);
            testFunctions.forEach((test) => {
                // Skip tests not supported on this network
                if (test.networks.indexOf(network) === -1) {
                    return;
                }
                if (test.checkSkip && test.checkSkip(name, network, test)) {
                    return;
                }
                // How many attempts to try?
                const attempts = (test.attempts != null) ? test.attempts : 3;
                const timeout = (test.timeout != null) ? test.timeout : 60;
                const extras = (test.extras || []).reduce((accum, key) => {
                    accum[key] = true;
                    return accum;
                }, {});
                it(`${name}.${network ? network : "default"} ${test.name}`, function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        // Multiply by 2 to make sure this never happens; we want our
                        // timeout logic to success, not allow a done() called multiple
                        // times because our logic returns after the timeout has occurred.
                        this.timeout(2 * (1000 + timeout * 1000 * attempts));
                        // Wait for the funding transaction to be mined
                        if (extras.funding) {
                            yield fundReceipt;
                        }
                        // We wait at least 1 seconds between tests
                        if (!extras.nowait) {
                            yield waiter(1000);
                        }
                        let error = null;
                        for (let attempt = 0; attempt < attempts; attempt++) {
                            try {
                                const result = yield Promise.race([
                                    test.execute(provider),
                                    waiter(timeout * 1000).then((result) => { throw new Error("timeout"); })
                                ]);
                                return result;
                            }
                            catch (attemptError) {
                                console.log(`*** Failed attempt ${attempt + 1}: ${attemptError.message}`);
                                error = attemptError;
                                // On failure, wait 5s
                                yield waiter(5000);
                            }
                        }
                        throw error;
                    });
                });
            });
        });
    });
});
describe("Test WebSocketProvider", function () {
    this.retries(3);
    function testWebSocketProvider(provider) {
        return __awaiter(this, void 0, void 0, function* () {
            yield provider.destroy();
        });
    }
    it("InfuraProvider.getWebSocketProvider", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = quais.providers.InfuraProvider.getWebSocketProvider();
            yield testWebSocketProvider(provider);
        });
    });
});
//# sourceMappingURL=test-providers.js.map